// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public partial class UIMap
    {
        
        /// <summary>
        /// opencalc - Use 'opencalcParams' to pass parameters into this method.
        /// </summary>
        public void opencalc()
        {
            #region Variable Declarations
            WinComboBox uIOpenComboBox = this.UIRunWindow.UIItemWindow.UIOpenComboBox;
            WinEdit uIOpenEdit = this.UIRunWindow.UIItemWindow1.UIOpenEdit;
            #endregion

            // Press keyboard shortcut keys 'Windows + R'
            Keyboard.SendKeys(this.opencalcParams.SendKeys, ModifierKeys.Windows);

            // Select 'calc.exe' in 'Open:' combo box
            uIOpenComboBox.EditableItem = this.opencalcParams.UIOpenComboBoxEditableItem;

            // Type '{Enter}' in 'Open:' text box
            Keyboard.SendKeys(uIOpenEdit, this.opencalcParams.UIOpenEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// enterfirstnumber - Use 'enterfirstnumberParams' to pass parameters into this method.
        /// </summary>
        public void enterfirstnumber()
        {
            #region Variable Declarations
            WinTitleBar uICalculatorTitleBar = this.UICalculatorWindow.UICalculatorTitleBar;
            WinText uIItem0Text = this.UICalculatorWindow.UIItem0Window.UIItem0Text;
            #endregion

            // Click 'Calculator' title bar
            Mouse.Click(uICalculatorTitleBar, new Point(80, 14));

            // Type '{NumPad1}' in '0' label
            Keyboard.SendKeys(uIItem0Text, this.enterfirstnumberParams.UIItem0TextSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// operator
        /// </summary>
        public void @operator()
        {
            #region Variable Declarations
            WinTitleBar uICalculatorTitleBar = this.UICalculatorWindow.UICalculatorTitleBar;
            WinButton uIAddButton = this.UICalculatorWindow.UIItemWindow.UIAddButton;
            #endregion

            // Click 'Calculator' title bar
            Mouse.Click(uICalculatorTitleBar, new Point(54, 5));

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(16, 8));
        }
        
        /// <summary>
        /// entersecondnumber - Use 'entersecondnumberParams' to pass parameters into this method.
        /// </summary>
        public void entersecondnumber()
        {
            #region Variable Declarations
            WinTitleBar uICalculatorTitleBar = this.UICalculatorWindow.UICalculatorTitleBar;
            WinText uIItem0Text = this.UICalculatorWindow.UIItem0Window.UIItem0Text;
            #endregion

            // Click 'Calculator' title bar
            Mouse.Click(uICalculatorTitleBar, new Point(71, 14));

            // Type '{NumPad6}' in '0' label
            Keyboard.SendKeys(uIItem0Text, this.entersecondnumberParams.UIItem0TextSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// equals
        /// </summary>
        public void equals()
        {
            #region Variable Declarations
            WinTitleBar uICalculatorTitleBar = this.UICalculatorWindow.UICalculatorTitleBar;
            WinButton uIEqualsButton = this.UICalculatorWindow.UIItemWindow1.UIEqualsButton;
            #endregion

            // Click 'Calculator' title bar
            Mouse.Click(uICalculatorTitleBar, new Point(49, 9));

            // Click 'Equals' button
            Mouse.Click(uIEqualsButton, new Point(18, 26));
        }
        
        /// <summary>
        /// checkresult - Use 'checkresultExpectedValues' to pass parameters into this method.
        /// </summary>
        public void checkresult()
        {
            #region Variable Declarations
            WinText uIItem0Text = this.UICalculatorWindow.UIItem0Window.UIItem0Text;
            #endregion

            // Verify that '0' label's property 'DisplayText' equals '7'
            Assert.AreEqual(this.checkresultExpectedValues.UIItem0TextDisplayText, uIItem0Text.DisplayText);
        }
        
        #region Properties
        public virtual opencalcParams opencalcParams
        {
            get
            {
                if ((this.mopencalcParams == null))
                {
                    this.mopencalcParams = new opencalcParams();
                }
                return this.mopencalcParams;
            }
        }
        
        public virtual enterfirstnumberParams enterfirstnumberParams
        {
            get
            {
                if ((this.menterfirstnumberParams == null))
                {
                    this.menterfirstnumberParams = new enterfirstnumberParams();
                }
                return this.menterfirstnumberParams;
            }
        }
        
        public virtual entersecondnumberParams entersecondnumberParams
        {
            get
            {
                if ((this.mentersecondnumberParams == null))
                {
                    this.mentersecondnumberParams = new entersecondnumberParams();
                }
                return this.mentersecondnumberParams;
            }
        }
        
        public virtual checkresultExpectedValues checkresultExpectedValues
        {
            get
            {
                if ((this.mcheckresultExpectedValues == null))
                {
                    this.mcheckresultExpectedValues = new checkresultExpectedValues();
                }
                return this.mcheckresultExpectedValues;
            }
        }
        
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }
        
        public UICalculatorWindow UICalculatorWindow
        {
            get
            {
                if ((this.mUICalculatorWindow == null))
                {
                    this.mUICalculatorWindow = new UICalculatorWindow();
                }
                return this.mUICalculatorWindow;
            }
        }
        #endregion
        
        #region Fields
        private opencalcParams mopencalcParams;
        
        private enterfirstnumberParams menterfirstnumberParams;
        
        private entersecondnumberParams mentersecondnumberParams;
        
        private checkresultExpectedValues mcheckresultExpectedValues;
        
        private UIRunWindow mUIRunWindow;
        
        private UICalculatorWindow mUICalculatorWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'opencalc'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class opencalcParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + R'
        /// </summary>
        public string SendKeys = "R";
        
        /// <summary>
        /// Select 'calc.exe' in 'Open:' combo box
        /// </summary>
        public string UIOpenComboBoxEditableItem = "calc.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'Open:' text box
        /// </summary>
        public string UIOpenEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'enterfirstnumber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class enterfirstnumberParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad1}' in '0' label
        /// </summary>
        public string UIItem0TextSendKeys = "{NumPad1}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'entersecondnumber'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class entersecondnumberParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{NumPad6}' in '0' label
        /// </summary>
        public string UIItem0TextSendKeys = "{NumPad6}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'checkresult'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class checkresultExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that '0' label's property 'DisplayText' equals '7'
        /// </summary>
        public string UIItem0TextDisplayText = "7";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class UICalculatorWindow : WinWindow
    {
        
        public UICalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CalcFrame";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UICalculatorTitleBar
        {
            get
            {
                if ((this.mUICalculatorTitleBar == null))
                {
                    this.mUICalculatorTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICalculatorTitleBar.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUICalculatorTitleBar;
            }
        }
        
        public UIItem0Window UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new UIItem0Window(this);
                }
                return this.mUIItem0Window;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUICalculatorTitleBar;
        
        private UIItem0Window mUIItem0Window;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class UIItem0Window : WinWindow
    {
        
        public UIItem0Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "150";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinText UIItem0Text
        {
            get
            {
                if ((this.mUIItem0Text == null))
                {
                    this.mUIItem0Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem0Text.SearchProperties[WinText.PropertyNames.Name] = "Result";
                    this.mUIItem0Text.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem0Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem0Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "93";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.457")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "121";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIEqualsButton
        {
            get
            {
                if ((this.mUIEqualsButton == null))
                {
                    this.mUIEqualsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEqualsButton.SearchProperties[WinButton.PropertyNames.Name] = "Equals";
                    this.mUIEqualsButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIEqualsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEqualsButton;
        #endregion
    }
}
